plugins {
    id 'com.jfrog.bintray' version '1.7.3'
    id "com.github.hierynomus.license" version "0.13.1"
    id 'com.github.ben-manes.versions' version '0.13.0'
    id "com.github.spotbugs" version "1.4"
}

dependencies {
    compile project(':http-builder-ng-core')

    compile 'org.apache.httpcomponents:httpclient:4.5.2'
    compile 'org.apache.httpcomponents:httpmime:4.5.2'

    testCompile project(path: ':http-builder-ng-core', configuration: 'testcode')
}

tasks.bintrayUpload.dependsOn build

license {
    header rootProject.file('config/license_header.txt')

    // Toggle ignoreFailures to false to enable license-checking that will fail the build
    ignoreFailures true

    ext.name = 'HttpBuilder-NG Project'
    ext.year = Calendar.instance.get(Calendar.YEAR)

    excludes(['**/*.txt', '**/*.dtd', '**/*.xml', '**/*.ent', '**/*.jks'])
}

spotbugs {
    toolVersion = '3.1.0-RC6'
    ignoreFailures = true // let's not kill the build for this
    effort = 'max'
    reportLevel = 'low'
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('../config/findbugs-styles.xsl')
    }
}

bintray {
    if (project.hasProperty('user') && project.hasProperty('key')) {
        user = project.property('user')
        key = project.property('key')

        publications = ['httpbPublication']

        pkg {
            repo = 'dclark'
            name = 'httpbuilder-ng-apache'
            userOrg = 'http-builder-ng'
            desc = 'Groovy client for making http requests'
            licenses = ['Apache-2.0']
            labels = ['groovy']
            vcsUrl = 'https://github.com/http-builder-ng/http-builder-ng'
            websiteUrl = 'https://http-builder-ng.github.io/http-builder-ng/'
            issueTrackerUrl = 'https://github.com/http-builder-ng/http-builder-ng/issues'
            publicDownloadNumbers = true

            version {
                name = project.version
                vcsTag = "v${project.version}"
                gpg {
                    sign = true
                }
                mavenCentralSync {
                    sync = true
                    user = project.property('sonotypeUser')
                    password = project.property('sonotypePass')
                }
            }
        }
    }
}

shadowJar {
    classifier = 'safe'

    dependencies {
        exclude(dependency('commons-logging:commons-logging:'))
        exclude(dependency('com.fasterxml.jackson.core:jackson-databind:'))
        exclude(dependency('com.opencsv:opencsv:'))
        exclude(dependency('javax.mail:javax.mail-api:'))
        exclude(dependency('com.sun.main:javax.mail:'))
        exclude(dependency('net.sourceforge.nekohtml:nekohtml:'))
        exclude(dependency('org.codehaus.groovy:groovy-all:'))
        exclude(dependency('org.jsoup:jsoup:'))
        exclude(dependency('oauth.signpost:signpost-commonshttp4:'))
        exclude(dependency('oauth.signpost:signpost-core:'))
        exclude(dependency('org.slf4j:slf4j-api:'))
    }

    relocate 'org.apache.http', 'httpb.http'
    relocate 'mozilla', 'httpb.mozilla'
    relocate 'org.apache.commons.codec', 'httpb.codec'
    relocate 'org.apache.env', 'httpb.env'
    relocate 'org.apache.xml.resolver', 'httpb.xml.resolver'
}